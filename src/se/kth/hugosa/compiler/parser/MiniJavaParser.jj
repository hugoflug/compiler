options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}

PARSER_BEGIN(MiniJavaParser)
  package se.kth.hugosa.compiler.parser;
  import se.kth.hugosa.compiler.ast.*;
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)

TOKEN : {
     < CLASS: "class" >
  |  < PUBLIC : "public" >
  |  < STATIC : "static" >
  |  < VOID : "void" >
  |  < STRING : "String" >
  |  < RETURN : "return" >
  |  < INT : "int" >
  |  < LBRACKET : "[" >
  |  < RBRACKET : "]" >
  |  < BOOLEAN : "boolean" >
  |  < LBRACE : "{" >
  |  < RBRACE : "}" >
  |  < LPAREN : "(" >
  |  < RPAREN : ")" >
  |  < IF : "if" >
  |  < ELSE : "else" >
  |  < WHILE : "while" >
  |  < SYSO : "System.out.println" >
  |  < DOT : "." >
  |  < LENGTH : "length" >
  |  < TRUE : "true" >
  |  < FALSE : "false" >
  |  < THIS : "this" >
  |  < NEW : "new" >
  |  < EXCLMARK : "!" >
  |  < AND : "&&" >
  |  < LT : "<" >
  |  < PLUS : "+" >
  |  < MINUS : "-" >
  |  < MULT : "*" >
  |  < COMMA : "," >
  |  < ASSIGN : "=" >
  |  < SEMICOLON : ";" >
  |  < ID : ((["a"-"z"]|["A"-"Z"]|"_")(["a"-"z"]|["A"-"Z"]|["0"-"9"]|"_")*) >
  |  < INT_LIT : ("0"|(["1"-"9"](["0"-"9"])*)) >
}

SKIP : {
     " "
  |  "\t"
  |  "\n"
  |  "\r"
  |  "\f"
  |  <"//" (~["\r", "\n"])*>
  |  "/*" : COMMENT_STATE
}

<COMMENT_STATE> SKIP : {
      "*/" : DEFAULT
    | < ~[] >
}

Program parse() :
{
    Program program;
}
{
    program = Program()
    { return program; }
}

Program Program() :
{
    MainClass mainClass;
    ClassDeclList classDecls = new ClassDeclList();
    ClassDecl classDecl;
}
{
    mainClass = MainClass() (classDecl = ClassDecl() { classDecls.addClassDecl(classDecl); })*
    { return new Program(mainClass, classDecls); }
}

MainClass MainClass() :
{
    Token className;
    Token stdArgsName;
    Token main;
    VarDeclList varDecls = new VarDeclList();
    VarDecl varDecl;
    StmtList statements = new StmtList();
    Stmt stmt;
}
{
    <CLASS> className = <ID> <LBRACE> <PUBLIC> <STATIC> <VOID> main = <ID> <LPAREN> <STRING> <LBRACKET> <RBRACKET> stdArgsName = <ID> <RPAREN> <LBRACE>
       (LOOKAHEAD(2) varDecl = VarDecl() { varDecls.addVarDecl(varDecl); })*
       (stmt = Stmt() { statements.addStmt(stmt); })*
    <RBRACE>
    <RBRACE>

    {
        if (!main.image.equals("main")) {
            throw new ParseException();
        }
        return new MainClass(new Identifier(className.image), new Identifier(stdArgsName.image),
            varDecls, statements);
    }
}

ClassDecl ClassDecl() :
{
    Token id;
    VarDeclList varDecls = new VarDeclList();
    VarDecl varDecl;
    MethodDeclList methodDecls = new MethodDeclList();
    MethodDecl methodDecl;
}
{
    <CLASS> id = <ID>
    <LBRACE> (varDecl = VarDecl() { varDecls.addVarDecl(varDecl); })*
    (methodDecl = MethodDecl() { methodDecls.addMethodDecl(methodDecl); })* <RBRACE>

    { return new ClassDecl(new Identifier(id.image), varDecls, methodDecls); }
}

Exp Exp() :
{
    Exp exp1;
    Exp exp2;
}
{
    exp1 = ExpLT() (<AND> exp2 = ExpLT() { exp1 = new And(exp1, exp2); })*
    { return exp1; }
}

Exp ExpLT() :
{
    Exp exp1;
    Exp exp2;
}
{
    exp1 = ExpPlusMinus() (<LT> exp2 = ExpPlusMinus() { exp1 = new LessThan(exp1, exp2); })*
    { return exp1; }
}

Exp ExpPlusMinus() :
{
    Exp exp1;
    Exp exp2;
}
{
    exp1 = ExpMult() (
                <PLUS> exp2 = ExpMult() { exp1 = new Plus(exp1, exp2); }
               |<MINUS> exp2 = ExpMult() { exp1 = new Minus(exp1, exp2); }
               )*
    { return exp1; }
}

Exp ExpMult() :
{
    Exp exp1;
    Exp exp2;
}
{
    exp1 = ExpNot() (<MULT> exp2 = ExpNot() { exp1 = new Mult(exp1, exp2); })*
    { return exp1; }
}

Exp ExpNot ():
{
    Exp value;
    int nots = 0;
}
{
    (
        (<EXCLMARK> { nots++; })+ value = ExpInfo()
        {
            for (int i = 0; i < nots; i++) {
                value = new Not(value);
            }
        }
        | value = ExpInfo()
    )

    { return value; }
}

Exp ExpInfo() :
{
    Exp value;
    Exp exp2;
    Token id;
    ExpList expList;
}
{
    value = ExpParens()
    (
             LOOKAHEAD(2)
             <DOT> <LENGTH> { value = new ArrayLength(value); }
           | <DOT> id = <ID> <LPAREN> expList = ExpList() { value = new MethodCall(value, new Identifier(id.image), expList); }  <RPAREN>
           | <LBRACKET> exp2 = Exp() <RBRACKET> { value = new ArrayLookup(value, exp2); }
    )*
    { return value; }
}

ExpList ExpList() :
{
    ExpList expList = new ExpList();
    Exp exp;
}
{
    [exp = Exp() { expList.addExp(exp); }(<COMMA> exp = Exp() { expList.addExp(exp); })*]
    { return expList; }
}

Exp ExpParens() :
{
    Exp value;
}
{
    (
        <LPAREN> value = Exp() <RPAREN>
        | value = ExpVal()
    )
    { return value; }
}

Exp ExpVal() :
{
   Token token = null;
   Exp value;
}
{
  (
       token = <INT_LIT> { value = new IntLit(Integer.parseInt(token.image)); }
      | token = <TRUE> { value = new True(); }
      | token = <FALSE> { value = new False(); }
      | token = <THIS> { value = new This(); }
      | token = <ID> { value = new Identifier(token.image); }
      | LOOKAHEAD(2)
        <NEW> <INT> <LBRACKET> value = Exp() <RBRACKET> { value = new NewArray(value); }
      | <NEW> token = <ID> <LPAREN> <RPAREN> { value = new NewObject(new Identifier(token.image)); }
  )
  { return value; }
}

VarDecl VarDecl() :
{
    VarDecl varDecl;
    Token id;
    Type type;
}
{
    type = Type()
    id = <ID>
    <SEMICOLON>
    { return new VarDecl(type, new Identifier(id.image)); }
}

MethodDecl MethodDecl() :
{
    Type type;
    Token id;
    Identifier name;
    Formal formal;
    FormalList argList;
    VarDeclList varDecls = new VarDeclList();
    VarDecl varDecl;
    Stmt stmt;
    StmtList statements = new StmtList();
    Exp returnValue;
}
{
    <PUBLIC>
    type = Type()
    id = <ID> { name = new Identifier(id.image);}
    <LPAREN> argList = FormalList() <RPAREN> <LBRACE>
    (LOOKAHEAD(2) varDecl = VarDecl() {varDecls.addVarDecl(varDecl);})*
    (stmt = Stmt() {statements.addStmt(stmt);})*
    <RETURN> returnValue = Exp() <SEMICOLON>
    <RBRACE>
    { return new MethodDecl(type, name, argList, varDecls, statements, returnValue); }
}

FormalList FormalList() :
{
    FormalList formalList = new FormalList();
    Type type;
    Token id;
    Identifier name;
}
{
    [type = Type() id = <ID> { formalList.addFormal(new Formal(type, new Identifier(id.image))); }
    (<COMMA> type = Type() id = <ID> { formalList.addFormal(new Formal(type, new Identifier(id.image))); } )*]

    { return formalList; }
}

Type Type() :
{
    Type type;
    Token id;
}
{
    (
          LOOKAHEAD(2)
          <INT> <LBRACKET> <RBRACKET> { type = new IntArrayType(); }
        | <BOOLEAN> { type = new BooleanType(); }
        | <INT> { type = new IntType(); }
        | id = <ID> { type = new ObjectType(id.image); }
    )
    { return type; }
}

Stmt Stmt() :
{
    Stmt stmt;
    Stmt stmt2;
    StmtList stmtList = new StmtList();
    Exp exp1;
    Exp exp2;
    Token id;
}
{
    (
            <LBRACE> (stmt = Stmt() { stmtList.addStmt(stmt); })* <RBRACE> { stmt = new Block(stmtList); }
          | <IF> <LPAREN> exp1 = Exp() <RPAREN> stmt = Stmt() <ELSE> stmt2 = Stmt() { stmt = new If(exp1, stmt, stmt2); }
          | <WHILE> <LPAREN> exp1 = Exp() <RPAREN> stmt = Stmt() { stmt = new While(exp1, stmt); }
          | <SYSO> <LPAREN> exp1 = Exp() <RPAREN> <SEMICOLON> { stmt = new Syso(exp1); }
          | LOOKAHEAD(2)
            id = <ID> <ASSIGN> exp1 = Exp() <SEMICOLON> { stmt = new Assign(new Identifier(id.image), exp1); }
          | id = <ID> <LBRACKET> exp1 = Exp() <RBRACKET> <ASSIGN> exp2 = Exp() <SEMICOLON> { stmt = new ArrayAssign(new Identifier(id.image), exp1, exp2); }
    )
  { return stmt; }
}